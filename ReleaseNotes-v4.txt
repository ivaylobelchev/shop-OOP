1) Направих class ProductCatalogueType, който може да съдържа различните типове продукти. Реализиран е чрез std::vector и template, в който се задава категорията на продукта. Както и в реален онлайн магазин, нямам нужда да правя каталог с всички възможни типове продукти в един общ клас, тъй като потребител не би се колебал дали да си купи мобилен телефон или настолен компютър и да има нужда да ги сравни, а би ги разглеждал по отделно според нуждите си.

2) Оправих грешките с линкерите между файловете, тъй като вече нямам template-ен клас, който трябва да ползвам, а ползвам std::vector. (Файлът с VectorTemplate не е включен поради тази причина.)

3) Замених const char* с std::string навсякъде, освен в паролите в класовете за потребители, тъй като функцията ми за писане на '*' вместо самите символи ползва char-ове.

4) Чрез print() на pointer, обозначен като Product, но реално сочи към Phone, PC или Laptop, може да се извика print() на класа наследник, заради виртуалността на функцията print().

5) Class Basket работи с std::vector<Product*>, но няма нужда да имам деструктор, защото те ще се унижощат накрая на програмата от съответните класове. Принтирам всички продукти чрез (*products[i]).print(), за което и аз съм учуден, че работи.

6) Осъзнавам, че на много места вече не ми е нужно да предефинирам копи конструктори и операцията за присвояване, но имам productNumber в Product, който не трябва да се копира, а за останалите нямам време да ги тествам обстойно след като ги проверя, така че ги оставям, защото знам, че работят.

7) Оправена грешка в класа User, където в копи конструктора и в операцията за присвояване ( на 165ти и 178ми ред) пишеше
this->admin = admin;
вместо
this->admin = from.admin;
което караше програмата да копира грешна стойност.